# Define input raster files (replace with actual file paths)
raster_files = {
"biological_sensitivity": "path/to/biological_sensitivity.tif",
"watershed": "path/to/watershed.tif",
"streams": "path/to/streams.tif",
"wetlands": "path/to/wetlands.tif",
"slope": "path/to/slope.tif",
"buffer_protected": "path/to/buffer_protected.tif",
"forest_age": "path/to/forest_age.tif"
}
# Define weights (should sum to 1)
weights = {
"biological_sensitivity": 0.2,
"watershed": 0.15,
"streams": 0.15,
"wetlands": 0.1,
"slope": 0.1,
"buffer_protected": 0.15,
"forest_age": 0.15
}
# Read rasters and apply weights
weighted_sum = None
for layer, path in raster_files.items():
with rasterio.open(path) as src:
raster_data = src.read(1).astype(float)  # Read raster band 1
raster_data[raster_data == src.nodata] = np.nan  # Handle NoData values
if weighted_sum is None:
weighted_sum = weights[layer] * raster_data
else:
weighted_sum += weights[layer] * raster_data
import rasterio
import numpy as np
import geopandas as gpd
import matplotlib.pyplot as plt
from rasterio.plot import show
from rasterio.mask import mask
# Define input raster files (replace with actual file paths)
raster_files = {
"biological_sensitivity": "path/to/biological_sensitivity.tif",
"watershed": "path/to/watershed.tif",
"streams": "path/to/streams.tif",
"wetlands": "path/to/wetlands.tif",
"slope": "path/to/slope.tif",
"buffer_protected": "path/to/buffer_protected.tif",
"forest_age": "path/to/forest_age.tif"
}
# Define weights (should sum to 1)
weights = {
"biological_sensitivity": 0.2,
"watershed": 0.15,
"streams": 0.15,
"wetlands": 0.1,
"slope": 0.1,
"buffer_protected": 0.15,
"forest_age": 0.15
}
# Read rasters and apply weights
weighted_sum = None
for layer, path in raster_files.items():
with rasterio.open(path) as src:
raster_data = src.read(1).astype(float)  # Read raster band 1
raster_data[raster_data == src.nodata] = np.nan  # Handle NoData values
if weighted_sum is None:
weighted_sum = weights[layer] * raster_data
else:
weighted_sum += weights[layer] * raster_data
# Normalize weighted sum (optional)
weighted_sum = (weighted_sum - np.nanmin(weighted_sum)) / (np.nanmax(weighted_sum) - np.nanmin(weighted_sum))
# Load parcel data (replace with actual file path)
parcels = gpd.read_file("path/to/parcels.shp")
# Select top X% parcels based on suitability (e.g., top 10%)
threshold = np.nanpercentile(weighted_sum, 90)  # Adjust percentage as needed
selected_parcels = parcels.copy()
selected_parcels["suitability"] = selected_parcels.geometry.centroid.apply(
lambda pt: weighted_sum[int(pt.y), int(pt.x)] if weighted_sum[int(pt.y), int(pt.x)] >= threshold else np.nan
)
selected_parcels = selected_parcels.dropna()
# Plot results
fig, ax = plt.subplots(figsize=(10, 8))
show(weighted_sum, cmap="viridis", title="Weighted Suitability Map", ax=ax)
parcels.boundary.plot(ax=ax, edgecolor='gray', linewidth=0.5)
selected_parcels.boundary.plot(ax=ax, edgecolor='red', linewidth=1.5, label="Selected Parcels")
plt.legend()
plt.show()
quarto check jupyter
reticulate::repl_python()
