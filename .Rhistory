"medium severity" = "orange",
"high severity" = "red"),
name = "Burn Severity") +
labs(title = "Distribution of NDVI Values by Burn Severity Class",
x = "Burn Severity Class",
y = "NDVI") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# calculate dNBR
# reclassify dNBR into Burn Severity Classes
# set burn severity levels
# plot
# Load rasters from GeoTIFF files
pre_fire_nbr <- rast("data/pre_fire_nbr.tif")
# calculate dNBR
# reclassify dNBR into Burn Severity Classes
# set burn severity levels
# plot
# Load rasters from GeoTIFF files
pre_fire_nbr <- rast("post_fire_nbr.tif")
post_fire_nbr <- rast("post_fire_nbr.tif")
# calculate the dNBR
dNBR <- pre_fire_nbr - post_fire_nbr
# define the classification
reclass_df <- matrix(c(-0.2, 0.15, 1,
0.15, 0.25, 2,
0.25, 0.3, 3,
0.3, 1.0, 4), ncol = 3, byrow = TRUE)
# reclassify dNBR into the severity classes
burn_severity <- classify(dNBR, reclass_df)
# set the burn severity for the matrix ids 1:4
levels(burn_severity) <- data.frame(
id = 1:4,
label = c("unburned", "low severity", "medium severity", "high severity"))
# plot burn severity with the Prouton Fire Extent with legend
plot(burn_severity, col = c("darkgreen", "yellow", "orange", "red"),
main = "Burn Severity of the Prouton Lakes Fire")
plot(prouton_fire_utm, add = TRUE, border = "black", lwd = 2, col = NA)
# calculate dNBR
# reclassify dNBR into Burn Severity Classes
# set burn severity levels
# plot
# Load rasters from GeoTIFF files
pre_fire_nbr <- rast("post_fire_nbr.tif")
post_fire_nbr <- rast("post_fire_nbr.tif")
prouton_fire <- st_read("H_FIRE_PLY_polygon.shp")
library(sf)
# calculate dNBR
# reclassify dNBR into Burn Severity Classes
# set burn severity levels
# plot
# Load rasters from GeoTIFF files
pre_fire_nbr <- rast("post_fire_nbr.tif")
post_fire_nbr <- rast("post_fire_nbr.tif")
prouton_fire <- st_read("H_FIRE_PLY_polygon.shp")
library(terra)
library(sf)
library(dplyr)
library(ggplot2)
library(readr)
library(stringr)
library(lubridate)
library(tidyr)
# calculate dNBR
# reclassify dNBR into Burn Severity Classes
# set burn severity levels
# plot
# Load rasters from GeoTIFF files
pre_fire_nbr <- rast("post_fire_nbr.tif")
post_fire_nbr <- rast("post_fire_nbr.tif")
prouton_fire <- st_read("H_FIRE_PLY_polygon.shp")
prouton_fire <- st_read("H_FIRE_PLY_polygon.shp")
prouton_fire <- st_read("PROT_HISTORICAL_FIRE_POLYS_SP/H_FIRE_PLY_polygon.shp")
# calculate dNBR
# reclassify dNBR into Burn Severity Classes
# set burn severity levels
# plot
# Load rasters from GeoTIFF files
pre_fire_nbr <- rast("post_fire_nbr.tif")
post_fire_nbr <- rast("post_fire_nbr.tif")
prouton_fire <- st_read("PROT_HISTORICAL_FIRE_POLYS_SP/H_FIRE_PLY_polygon.shp")
# calculate the dNBR
dNBR <- pre_fire_nbr - post_fire_nbr
# define the classification
reclass_df <- matrix(c(-0.2, 0.15, 1,
0.15, 0.25, 2,
0.25, 0.3, 3,
0.3, 1.0, 4), ncol = 3, byrow = TRUE)
# reclassify dNBR into the severity classes
burn_severity <- classify(dNBR, reclass_df)
# set the burn severity for the matrix ids 1:4
levels(burn_severity) <- data.frame(
id = 1:4,
label = c("unburned", "low severity", "medium severity", "high severity"))
# plot burn severity with the Prouton Fire Extent with legend
plot(burn_severity, col = c("darkgreen", "yellow", "orange", "red"),
main = "Burn Severity of the Prouton Lakes Fire")
plot(prouton_fire, add = TRUE, border = "black", lwd = 2, col = NA)
# calculate dNBR
# reclassify dNBR into Burn Severity Classes
# set burn severity levels
# plot
# Load rasters from GeoTIFF files
pre_fire_nbr <- rast("post_fire_nbr.tif")
post_fire_nbr <- rast("post_fire_nbr.tif")
prouton_fire <- st_read("PROT_HISTORICAL_FIRE_POLYS_SP/H_FIRE_PLY_polygon.shp")
prouton_fire_utm10 <- st_transform(prouton_fire, crs = 32610)
# calculate the dNBR
dNBR <- pre_fire_nbr - post_fire_nbr
# define the classification
reclass_df <- matrix(c(-0.2, 0.15, 1,
0.15, 0.25, 2,
0.25, 0.3, 3,
0.3, 1.0, 4), ncol = 3, byrow = TRUE)
# reclassify dNBR into the severity classes
burn_severity <- classify(dNBR, reclass_df)
# set the burn severity for the matrix ids 1:4
levels(burn_severity) <- data.frame(
id = 1:4,
label = c("unburned", "low severity", "medium severity", "high severity"))
# plot burn severity with the Prouton Fire Extent with legend
plot(burn_severity, col = c("darkgreen", "yellow", "orange", "red"),
main = "Burn Severity of the Prouton Lakes Fire")
plot(prouton_fire, add = TRUE, border = "black", lwd = 2, col = NA)
{r, echo=FALSE}
{r, echo=FALSE}
df <- data.frame(
band_n = 1:7,
band_name = c("Band 1 - Coastal aerosol",
"Band 2 - Blue",
"Band 3 - Green",
"Band 4 - Red",
"Band 5 - Near Infrared (NIR)",
"Band 6 - SWIR 1",
"Band 7 - SWIR 2"),
wave_range = c("0.43-0.45",
"0.45-0.51",
"0.53-0.59",
"0.64-0.67",
"0.85-0.88",
"1.57-1.65",
"2.11-2.29")
)
knitr::kable(df)
knitr::opts_chunk$set(echo = TRUE)
# Create output directory if it doesn't exist
if (!dir.exists("output")) dir.create("output", showWarnings = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# Create output directory if it doesn't exist
if (!dir.exists("output")) dir.create("output", showWarnings = FALSE)
# calculate the dNBR
dNBR <- pre_fire_nbr - post_fire_nbr
knitr::opts_chunk$set(echo = TRUE)
library(lidR)
library(terra)
library(tidyverse)
# set working directory
setwd("~/GEM 521/Lab 5/Data")
wd <- "~/GEM 521/Lab 5/Data"   # create a variable string working directory
#read filtered .las into LAScatalog
filtered_cat_mkrf <- readLAScatalog("~/GEM 521/Lab 5/Data/Filtered")
summary(filtered_cat_mkrf)
plot(filtered_cat_mkrf)
#Create color palette
col_1 <- height.colors(50)
#Create DEM
dem_allLAS_mkrf <- rasterize_terrain(filtered_cat_mkrf, 2, tin())
#Plot DEM using color palette
plot(dem_allLAS_mkrf, col = col_1,
main = 'DEM of Alex Fraser Research Forest') #plot in 2D
#read normalized las into catalog to continue processing
norm_cat_mkrf <- readLAScatalog("~/GEM 521/Lab 5/Data/Normalized")
#add LAScatalog enginge option to filter undersired data points
opt_filter(norm_cat_mkrf) <- '-drop_z_below 0 -drop_z_above 65'
#ensure the entire study area was processed
plot(norm_cat_mkrf)
summary(norm_cat_mkrf)
#Create CHM for all normalized mkrf Tiles
chm_mkrf <- rasterize_canopy(norm_cat_mkrf, 2, p2r())
# plot the CHM just to make sure things look good
plot(chm_mkrf, col = col_1,
main = 'Canopy Height Model of Alex Fraser Research Forest') #plot in 2D
# read in csv file with plot locations
tree_plot_table <- read.csv("~/GEM 521/Lab 5/Data/Lab5_Plots.csv")
# set the radius for the plots
radius <- 154
#for loop to extract the 4 plots needed for the tree detection
for(i in 1:nrow(tree_plot_table)){                                              # run the loop until i = the number of rows in 'plot_table' (4)
plot_cent <- c(tree_plot_table$X[i], tree_plot_table$Y[i])                    # extract plot center
plot_las <- clip_circle(norm_cat_mkrf, plot_cent[1], plot_cent[2], radius)    # clip plot from norm_cat_mkrf
output_file <- paste("~/GEM 521/Lab 5/Data/Plots/Plot_", i, ".las", sep = "") # output directory as string
writeLAS(assign(paste("TD_Plot_", i, sep = ""), plot_las), output_file)       # write'mkrf_Plot_i' to output dir.
}
# read in the plots
plot_1 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_1.las")
plot_2 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_2.las")
plot_3 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_3.las")
plot_4 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_4.las")
# visualize the plots and compare
plot(plot_1)
plot(plot_2)
plot(plot_3)
plot(plot_4)
help("li2012")
help("segment_trees")
plot_1_segmented <- segment_trees(plot_1, li2012)
plot_1_segmented <- segment_trees(plot_1, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot_1_segmented
plot(plot_1_segmented)
plot(plot_1_segmented)
plot(plot_1_segmented, color = 'treeID')
# read in csv file with plot locations
tree_plot_table <- read.csv("~/GEM 521/Lab 5/Data/Lab5_Plots.csv")
# set the radius for the plots
radius <- 154
#for loop to extract the 4 plots needed for the tree detection
for(i in 1:nrow(tree_plot_table)){                                              # run the loop until i = the number of rows in 'plot_table' (4)
plot_cent <- c(tree_plot_table$X[i], tree_plot_table$Y[i])                    # extract plot center
plot_las <- clip_circle(norm_cat_mkrf, plot_cent[1], plot_cent[2], radius)    # clip plot from norm_cat_mkrf
output_file <- paste("~/GEM 521/Lab 5/Data/Plots/Plot_", i, ".las", sep = "") # output directory as string
writeLAS(assign(paste("Plot_", i, sep = ""), plot_las), output_file)       # write'TD_Plot_i' to output dir.
}
# read in csv file with plot locations
tree_plot_table <- read.csv("~/GEM 521/Lab 5/Data/Lab5_Plots.csv")
# set the radius for the plots
radius <- 154
#for loop to extract the 4 plots needed for the tree detection
for(i in 1:nrow(tree_plot_table)){                                              # run the loop until i = the number of rows in 'plot_table' (4)
plot_cent <- c(tree_plot_table$X[i], tree_plot_table$Y[i])                    # extract plot center
plot_las <- clip_circle(norm_cat_mkrf, plot_cent[1], plot_cent[2], radius)    # clip plot from norm_cat_mkrf
output_file <- paste("~/GEM 521/Lab 5/Data/Plots/Plot_", i, ".las", sep = "") # output directory as string
writeLAS(assign(paste("Plot_", i, sep = ""), plot_las), output_file)       # write'TD_Plot_i' to output dir.
}
#read normalized las into catalog to continue processing
norm_cat_mkrf <- readLAScatalog("~/GEM 521/Lab 5/Data/Normalized")
# read in csv file with plot locations
tree_plot_table <- read.csv("~/GEM 521/Lab 5/Data/Lab5_Plots.csv")
# set the radius for the plots
radius <- 154
#for loop to extract the 4 plots needed for the tree detection
for(i in 1:nrow(tree_plot_table)){                                              # run the loop until i = the number of rows in 'plot_table' (4)
plot_cent <- c(tree_plot_table$X[i], tree_plot_table$Y[i])                    # extract plot center
plot_las <- clip_circle(norm_cat_mkrf, plot_cent[1], plot_cent[2], radius)    # clip plot from norm_cat_mkrf
output_file <- paste("~/GEM 521/Lab 5/Data/Plots/Plot_", i, ".las", sep = "") # output directory as string
writeLAS(assign(paste("Plot_", i, sep = ""), plot_las), output_file)       # write'TD_Plot_i' to output dir.
}
# visualize the plots and compare
plot(plot_1)
# read in the plots
plot_1 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_1.las")
plot_2 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_2.las")
plot_3 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_3.las")
plot_4 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_4.las")
# visualize the plots and compare
plot(plot_1)
plot(plot_2)
plot(plot_3)
plot(plot_4)
plot_1_segmented <- segment_trees(plot_1, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot(plot_1_segmented, color = 'treeID')
help("dalponte2016")
plot_1_DalCoo <- segment_trees(plot_1, dalponte2016(chm_mkrf, treetops = locate_trees(), ID = 'treeID'))
#Create CHM for all normalized mkrf Tiles
chm_mkrf <- rasterize_canopy(norm_cat_mkrf, 2, p2r())
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2, max_edge = 1))
help("pitfree")
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2, max_edge = 0,1))
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot(chm_plot1, main = "CHM - Pitfree Algorithm")
plot_1_segmented <- segment_trees(plot_1, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot(plot_1_segmented, color = 'treeID')
# visualize the plots and compare
plot(plot_1)
plot(plot_1_segmented, color = 'treeID')
plot_1_seg <- segment_trees(plot_1, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot_2_seg <- segment_trees(plot_2, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot_3_seg <- segment_trees(plot_3, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot_4_seg <- segment_trees(plot_4, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot(plot_1_seg, color = 'treeID')
plot(plot_2_seg, color = 'treeID')
plot(plot_3_seg, color = 'treeID')
plot(plot_4_seg, color = 'treeID')
help(li2012)
View(plot_3)
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot(chm_plot1, main = "CHM - Pitfree Algorithm", add = TRUE)
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot(chm_plot1, main = "CHM - Pitfree Algorithm")
help(rasterize_canopy)
col1 <- height.colors(15)
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot(chm_plot1, main = "CHM - Pitfree Algorithm", color = col1)
col1 <- height.colors(15)
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot(chm_plot1, main = "CHM - Pitfree Algorithm", col = col1)
col1 <- height.colors(15)
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2, dsmtin()))
col1 <- height.colors(15)
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2, dsmtin(0)))
col1 <- height.colors(15)
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot(chm_plot1, main = "CHM - Pitfree Algorithm", col = col1)
help("locate_trees")
locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = circular, ws_args = "z"))
locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = c(circular), ws_args = "z"))
locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = circular, ws_args = "z"))
locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(plot1_lmf)
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(plot1_lmf, add = TRUE)
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot1_lmf, add = TRUE)
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot1_lmf, add = TRUE, col = 'white')
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot1_lmf, add = TRUE, col = col1)
chm_plot2 <- rasterize_canopy(Plot_2, res = 0.5,
algorithm = pitfree(c(0.5, 2, 4, 10), subcircle = 0.2))
plot2_lmf <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot2, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot2_lmf, add = TRUE, col = col1)
help(rgl)
plot3d(chm_plot2, plot2_lmf)
install.packages("rgl")
knitr::opts_chunk$set(echo = TRUE)
plot3d(chm_plot2, plot2_lmf)
library(lidR)
library(terra)
library(tidyverse)
library(rgl)
plot3d(chm_plot2, plot2_lmf)
plot3d(plot2_lmf)
View(plot1_lmf)
# read in the plots
plot_1 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_1.las")
plot_2 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_2.las")
plot_3 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_3.las")
plot_4 <- readLAS("~/GEM 521/Lab 5/Data/Plots/Plot_4.las")
# visualize the plots and compare
plot(plot_1)
plot(plot_2)
plot(plot_3)
plot(plot_4)
plot_1_seg <- segment_trees(plot_1, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot_2_seg <- segment_trees(plot_2, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot_3_seg <- segment_trees(plot_3, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot_4_seg <- segment_trees(plot_4, li2012(dt1 = 1.5, dt2 = 2, R = 2, Zu = 15, hmin = 2, speed_up = 10))
plot(plot_1_seg, color = 'treeID')
plot(plot_2_seg, color = 'treeID')
plot(plot_3_seg, color = 'treeID')
plot(plot_4_seg, color = 'treeID')
chm_plot1 <- rasterize_canopy(Plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
col1 <- height.colors(15)
plot(chm_plot1, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot1_lmf, add = TRUE, col = col1)
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
col1 <- height.colors(15)
plot(chm_plot1, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot1_lmf, add = TRUE, col = col1)
chm_plot2 <- rasterize_canopy(plot_2, res = 0.5,
algorithm = pitfree(c(0.5, 2, 4, 10), subcircle = 0.2))
plot2_lmf <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot2, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot2_lmf, add = TRUE, col = col1)
chm_plot2 <- rasterize_canopy(plot_2, res = 0.5,
algorithm = pitfree(c(0.5, 2, 4, 10), subcircle = 0.2))
plot2_lmf <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot2, main = "CHM - Pitfree Algorithm", col = col1)
#plot(plot2_lmf, add = TRUE, col = col1)
chm_plot2 <- rasterize_canopy(plot_2, res = 0.5,
algorithm = pitfree(c(0.5, 2, 4, 10), subcircle = 0.2))
plot2_lmf <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot2, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot2_lmf, add = TRUE, col = col1)
chm_plot2 <- rasterize_canopy(plot_2, res = 0.5,
algorithm = pitfree(c(0.5, 2, 4, 10), subcircle = 0.2))
plot2_lmf <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2, shape = "circular"))
plot(chm_plot2, main = "CHM - Pitfree Algorithm", col = col1)
plot(plot2_lmf, add = TRUE, col = col1)
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot1_dalp <- segment_trees(plot_1, dalponte2016(chm_plot1, treetops = plot1_lmf))
col1 <- height.colors(15)
plot(plot1_dalp, main = "ITS - Dalponte Algorithm", col = col1)
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot1_dalp <- segment_trees(plot_1, dalponte2016(chm_plot1, treetops = plot1_lmf))
col1 <- height.colors(15)
plot(plot1_dalp, main = "ITS - Dalponte Algorithm", col = col1)
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot1_dalp <- segment_trees(plot_1, dalponte2016(chm_plot1, treetops = plot1_lmf))
col1 <- height.colors(15)
plot(plot1_dalp, main = "ITS - Dalponte Algorithm")
plot1_dalp <- segment_trees(plot_1, dalponte2016(chm_plot1, treetops = plot1_lmf))
View(plot1_dalp)
plot(plot1_dalp, color - 'treeID')
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot1_dalp <- segment_trees(plot_1, dalponte2016(chm_plot1, treetops = plot1_lmf))
plot(plot1_dalp, color - 'treeID')
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot1_dalp <- segment_trees(plot_1, dalponte2016(chm_plot1, treetops = plot1_lmf))
plot(plot1_dalp, color = 'treeID')
plot(plot_1_seg, color = 'treeID')
chm_plot2 <- rasterize_canopy(plot_2, res = 0.5,
algorithm = pitfree(c(0.5, 2, 4, 10), subcircle = 0.2))
plot2_lmf <- locate_trees(chm_plot2, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot2_dalp <- segment_trees(plot_2, dalponte2016(chm_plot2, treetops = plot2_lmf))
plot(plot2_dalp, color = 'treeID')
plot(plot_2_seg, color = 'treeID')
plot(chm_plot1, col = col_1)
plot(chm_plot1)
plot(plot1_lmf, add = TRUE)
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1)
plot(plot1_lmf, add = TRUE)
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1)
plot(plot1_lmf, add = TRUE, color = 'white')
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1)
plot(plot1_lmf, add = TRUE, color = 'black')
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1)
plot(plot1_lmf, add = TRUE, color = 'white')
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1)
plot(plot1_lmf, add = TRUE, col = 'white')
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1)
plot(plot1_lmf, add = TRUE, col = 'orange')
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1)
plot(plot1_lmf, add = TRUE, col = 'yellow')
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
plot(chm_plot1)
plot(plot1_lmf, add = TRUE, col = 'pink')
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws, hmin = 2, shape = "circular", ws_args = "z"))
# create chm for plot 1 with given pitfree values
chm_plot1 <- rasterize_canopy(plot_1, res = 0.5,
algorithm = pitfree(c(0, 10, 20, 30), subcircle = 0.2))
# use the locate_trees to 'locate the trees' using default values
plot1_lmf <- locate_trees(chm_plot1, lmf(ws = 5, hmin = 2, shape = "circular", ws_args = "z"))
# plot in 2D the CHM of plot 1 and the located trees using the lmf algorithm
plot(chm_plot1)
plot(plot1_lmf, add = TRUE, col = 'pink')
plot1_dalp <- segment_trees(plot_1, dalponte2016(chm_plot1, treetops = plot1_lmf))
plot(plot1_dalp, color = 'treeID')
