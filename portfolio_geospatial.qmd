---
title: "Geospatial Analysis"
format: html
editor: visual
---

# OECM Land Suitability Mesh Layer

This project focuses on identifying and designating Other Effective Area-Based Conservation Measures (OECMs) within the Átl’ḵa7tsem/Howe Sound Biosphere Region. Using geospatial data from BC Parcel Data, CPCAD, and ecological sensitivity datasets, the study aims to assess parcels of land for their potential to support biodiversity conservation while meeting the criteria for OECM designation. The methodology involves creating a "mesh sensitivity layer" that integrates critical habitat data, forest age (/\>200 years), and proximity to streams, combined with parcel attributes like ownership and zoning.

Spatial analysis, guided by a decision support tool, evaluates parcels based on ecological sensitivity, proximity to existing conservation areas, and governance capacity. The project also examines differences across regional districts (Metro Vancouver, Sunshine Coast, Squamish Lillooet), aiming to prioritize parcels that are unprotected but ecologically significant. Expected results include a map of high-priority OECM candidates, helping to enhance biodiversity conservation while contributing to Canada’s broader conservation goals under the CBD’s Aichi Targets.

Each hexagon has a value based on the ecological sensitivity, critical habitat, forest age, proximity to streams and slope steepness. Darker values represent more sensitive areas and are used to select parcels of land from the BC Parcel Fabric layer in order to locate pieces of land that could be considered as OECM.

## BC Fabric Parcel Selection

Using the suitability mesh layer in conjunction with the BC Fabric Parcel layer, I can select parcels that intersect with areas of the mesh where the total_weight is above a specified threshold. In the example below, a conservative value of 2.6, well above the mean, is used to select parcels. The resulting parcels can be seen below. These parcels are then categorized based on their zoning, OCP and municipality. A final list of potential OECMs are given to Howe Sound Biosphere Region Initiative Society (HSBRIS) for them to follow up with those selected parcels and organize an approach to start the land designation change.

```{r leaflet, echo=FALSE, warning=FALSE, message=FALSE}
library(dplyr)
library(leaflet)
library(sf)
library(rmapshaper)

# Load the main weighted layer
oecm_data <- st_read("data/HoweSound_Weig_FeaturesToJSO.gpkg", quiet=TRUE)

# Load additional shapefile layers
bc_parcel_fabric <- st_read("data/HoweSound_Parcel_all.shp", quiet=TRUE)
selected_parcels <- st_read("data/HoweSound_Parcels_selected.shp", quiet=TRUE)


# Check CRS and reproject to WGS84 if necessary
if (st_crs(oecm_data)$epsg != 4326) {
  oecm_data <- st_transform(oecm_data, crs = 4326)
}
if (st_crs(bc_parcel_fabric)$epsg != 4326) {
  bc_parcel_fabric <- st_transform(bc_parcel_fabric, crs = 4326)
}
if (st_crs(selected_parcels)$epsg != 4326) {
  selected_parcels <- st_transform(selected_parcels, crs = 4326)
}

# Validate the geometry
oecm_data <- st_make_valid(oecm_data)
bc_parcel_fabric <- st_make_valid(bc_parcel_fabric)
selected_parcels <- st_make_valid(selected_parcels)

# simplify geometries
oecm_data_simple <- ms_simplify(oecm_data, keep = 0.10)

# Define a color palette based on a column (e.g., "CategoryColumn")
pal <- colorNumeric(palette = "YlGnBu", domain = oecm_data$total_weig)

# Create the Leaflet map with multiple toggleable layers
main_map <- leaflet() %>%
  addProviderTiles("CartoDB.Positron") %>%
  
  # Add the main weighted layer
  addPolygons(
    data = oecm_data_simple,
    color = ~pal(total_weig),
    weight = 1,
    fillOpacity = 0.7,
    group = "Weighted Layer",
    label = ~paste0("Category: ", total_weig)
  ) %>%
  
  # Add the BC Parcel Fabric layer (update the label field as needed)
  addPolygons(
    data = bc_parcel_fabric,
    color = "red",
    weight = 1,
    fillOpacity = 0.3,
    group = "BC Parcel Fabric",
    label = ~paste0("Parcel: ", PARCEL_POL)  # replace 'parcel_id' with the actual field name
  ) %>%
  
  # Add the Selected Parcels layer (update the label field as needed)
  addPolygons(
    data = selected_parcels,
    color = "blue",
    weight = 1,
    fillOpacity = 0.5,
    group = "Selected Parcels",
    label = ~paste0("Parcel: ", PARCEL_POL)  # replace 'parcel_id' with the actual field name
    ) %>%
  
  # Center the view (update coordinates as desired)
  setView(lng = -123.155, lat = 49.7016, zoom = 12) %>%
  
  # Add a layers control for toggling layers on and off
  addLayersControl(
    overlayGroups = c("Weighted Layer", "BC Parcel Fabric", "Selected Parcels"),
    options = layersControlOptions(collapsed = FALSE)
  )

main_map
```

# Work In Progress

I am currently working on a webmap that allows for the users to dynamically adjust the importance of different layers and immediately see how those changes affect the selection of OECM parcels.

Here is a Python code snippet.

## Python

```{python}
#| execute: false
#| eval: false
#| freeze: never
#| code-fold: true
#| code-summary: "Python Code Snippet"

import rasterio
import numpy as np
import geopandas as gpd
import matplotlib.pyplot as plt
from rasterio.plot import show
from rasterio.warp import reproject, Resampling

# Define input raster files
raster_files = {
    "biological_sensitivity": r"C:/Users/lorsigno.stu/Documents/GitHub/E-Portfolio/data/Layers/critical_habitat_raster.tif",
    "watershed": r"C:/Users/lorsigno.stu/Documents/GitHub/E-Portfolio/data/Layers/watershed_raster.tif",
    "streams": r"C:/Users/lorsigno.stu/Documents/GitHub/E-Portfolio/data/Layers/streams_50m_buffer.tif",
    "wetlands": r"C:/Users/lorsigno.stu/Documents/GitHub/E-Portfolio/data/Layers/wetland_raster.tif",
    "slope": r"C:/Users/lorsigno.stu/Documents/GitHub/E-Portfolio/data/Layers/slope_greaterthan30_raster.tif",
    "forest_age": r"C:/Users/lorsigno.stu/Documents/GitHub/E-Portfolio/data/Layers/forest_age_vri.tif"
}

# Define weights
weights = {
    "biological_sensitivity": 0.25,
    "watershed": 0.15,
    "streams": 0.2,
    "wetlands": 0.15,
    "slope": 0.1,
    "forest_age": 0.15
}

# Select a reference raster (first raster in the dictionary)
reference_raster = list(raster_files.values())[0]

# Read reference raster to get target shape, transform, and CRS
with rasterio.open(reference_raster) as ref_src:
    ref_transform = ref_src.transform
    ref_crs = ref_src.crs
    ref_width = ref_src.width
    ref_height = ref_src.height
    ref_dtype = ref_src.dtypes[0]

# Function to resample rasters to match the reference raster dimensions
def resample_raster(src_path):
    with rasterio.open(src_path) as src:
        data = src.read(1).astype(float)
        data[data == src.nodata] = np.nan  # Handle NoData values
        
        # Create an empty array for resampled data
        resampled_data = np.empty((ref_height, ref_width), dtype=ref_dtype)
        
        # Reproject and resample
        reproject(
            source=data,
            destination=resampled_data,
            src_transform=src.transform,
            src_crs=src.crs,
            dst_transform=ref_transform,
            dst_crs=ref_crs,
            resampling=Resampling.bilinear
        )
        
        return resampled_data

# Read, resample, and apply weights
weighted_sum = np.zeros((ref_height, ref_width), dtype=np.float32)

for layer, path in raster_files.items():
    resampled_raster = resample_raster(path)
    weighted_sum += weights[layer] * resampled_raster  # Apply weighted sum

# Normalize weighted sum
weighted_sum = (weighted_sum - np.nanmin(weighted_sum)) / (np.nanmax(weighted_sum) - np.nanmin(weighted_sum))

# Load parcel data
parcels = gpd.read_file(r"c:/Users/lorsigno.stu/Documents/Projects/OECM_WebApp/Layers/HoweSound_Parcel_all.shp")

# Select top X% parcels based on suitability
threshold = np.nanpercentile(weighted_sum, 90)
selected_parcels = parcels.copy()
selected_parcels["suitability"] = selected_parcels.geometry.centroid.apply(
    lambda pt: weighted_sum[int(pt.y), int(pt.x)]
    if 0 <= int(pt.y) < ref_height and 0 <= int(pt.x) < ref_width and weighted_sum[int(pt.y), int(pt.x)] >= threshold
    else np.nan
)
selected_parcels = selected_parcels.dropna()

# Plot results
fig, ax = plt.subplots(figsize=(10, 8))

# Plot weighted suitability raster
show(weighted_sum, transform=ref_transform, cmap="viridis", ax=ax, title="Howe Sound Parcel Map")

# Plot parcels
parcels.boundary.plot(ax=ax, edgecolor="gray", linewidth=0.5)

# Plot selected parcels
selected_parcels.boundary.plot(ax=ax, edgecolor="red", linewidth=1.5, label="Selected Parcels")

plt.legend()
plt.show()
```

![Howe Sound Biosphere Parcels](images/HoweSoundParcels.png)
